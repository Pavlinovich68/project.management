generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model Account {
   id                String  @id @default(cuid())
   userId            Int
   type              String
   provider          String
   providerAccountId String
   refresh_token     String?
   access_token      String?
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String?
   session_state     String?
   user              users   @relation(fields: [userId], references: [id], onDelete: Cascade)
   @@unique([provider, providerAccountId])
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique
   userId       Int
   expires      DateTime
   user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
//NOTE - Подразделение
model division {
   id            Int         @id @default(autoincrement())
   name          String?     @unique(map: "division_u_ind") @db.VarChar(200)
   parent_id     Int?
   parent        division?   @relation("divisionTodivision", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   childrens     division[]  @relation("divisionTodivision")
   users         users[]
   projects      project[]
}
//NOTE - Пользователи системы
model users {
   id             Int         @id @default(autoincrement())
   email          String      @unique(map: "users_email_u_ind") @db.VarChar(50)
   name           String?     @db.VarChar(100)
   begin_date     DateTime    @db.Timestamp(6)
   end_date       DateTime?   @db.Timestamp(6)
   password       String?     @db.VarChar(255)
   division_id    Int
   roles          Json?       @db.Json
   attachment_id  Int?
   emailVerified  DateTime?
   contacts       String?     @db.VarChar(50)
   accounts       Account[]
   sessions       Session[]
   avatar         attachment? @relation(fields: [attachment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   division       division    @relation(fields: [division_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   restoreGuid    String?     @db.VarChar(32)
   restoreTime    DateTime?
   profile        profile[]
}
//NOTE - Вложения
model attachment {
   id             Int            @id @default(autoincrement())
   filename       String         @db.VarChar(100)
   body           Bytes
   date           DateTime       @db.Timestamp(6)
   size           Int
   type           String         @db.VarChar(100)
   md5            String         @db.VarChar(32)
   users          users[]
   roadmap_items  roadmap_item[]
}
//NOTE - Проекты
model project {
   id                Int       @id @default(autoincrement())
   code              String    @unique @db.VarChar(3)
   name              String    @db.VarChar(250)
   division_id       Int?
   division          division? @relation(fields: [division_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   begin_date        DateTime  @default(now()) @db.Timestamp(6)
   end_date          DateTime? @db.Timestamp(6)
   modules           module[]
   roadmap_items     roadmap_item[]
}
//NOTE - Модули
model module {
   id             Int            @id @default(autoincrement())
   name           String         @db.VarChar(250)
   project_id     Int
   project        project        @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   roadmap_items  roadmap_item[]
}
//NOTE - Рабочий календарь
model production_calendar {
   id          Int @id @default(autoincrement())
   year        Int
   exclusions  exclusion[]
}
//NOTE - Исключение
//SECTION
//NOTE - exclusion_type
// 0 - holiday
// 1 - reduced
// 2 - holiday transfer
// 3 - worked transfer
//!SECTION
model exclusion {
   id                      Int @id @default(autoincrement())
   date                    DateTime? @db.Timestamp(6)
   exclusion_type          Int
   production_calendar_id  Int
   production_calendar     production_calendar @relation(fields: [production_calendar_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   @@unique([date, production_calendar_id])
}
//NOTE - Профиль разработчика
//SECTION
//NOTE - stack
// 0 - back
// 1 - front
// 2 - full_stack
// 3 - unknown
//!SECTION
model profile {
   id          Int         @id @default(autoincrement())
   user_id     Int         @unique
   user        users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   stack       Int
   is_boss     Boolean
   begin_date  DateTime    @default(now()) @db.Timestamp(6)
   end_date    DateTime?   @db.Timestamp(6)
   short_name  String?     @db.VarChar(15)
   vacations   vacation[]
}
//NOTE - График отпусков
model vacation {
   id          Int      @id @default(autoincrement())
   year        Int
   start_date  DateTime @db.Timestamp(6)
   end_date    DateTime @db.Timestamp(6)
   profile_id  Int
   profile     profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
//NOTE - Дорожная карта
model roadmap {
   id             Int      @id @default(autoincrement())
   year           Int
   roadmap_items  roadmap_item[]
}
//NOTE - Элемент дорожной карты
model roadmap_item {
   id                Int            @id @default(autoincrement())
   roadmap_id        Int
   roadmap           roadmap        @relation(fields: [roadmap_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   project_id        Int?
   project           project?       @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   module_id         Int?
   module            module?        @relation(fields: [module_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   start_date        DateTime       @db.Timestamp(6)
   end_date          DateTime       @db.Timestamp(6)
   labour_intensity  Int?
   documents         attachment[]
   control_points    control_point[]
}
//NOTE - Контрольная точка
model control_point {
   id                Int   @id @default(autoincrement())
   date              DateTime    @db.Timestamp(6)
   name              String      @db.VarChar(250)
   roadmap_item_id   Int
   roadmap_item      roadmap_item @relation(fields: [roadmap_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
//NOTE - Дни пропуска
//SECTION
//NOTE - type
// 0 - sick_leave    Больничный
// 1 - rest          Отгул
// 2 - without_pay   Без содержания
// 3 - absenteeism   Прогул
//!SECTION
model days_off {
   id          Int   @id @default(autoincrement())
   start_date  DateTime @db.Timestamp(6)
   end_date    DateTime @db.Timestamp(6)
   type        Int
   comment     String   @db.VarChar(150)
}